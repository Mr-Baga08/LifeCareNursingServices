{"ast":null,"code":"// client/src/api/bookingService.js\nimport api from './index';\n\n/**\n * Booking service for handling booking-related API requests\n */\nconst bookingService = {\n  /**\n   * Create a new booking\n   * @param {Object} bookingData - Booking information\n   * @returns {Promise} - API response\n   */\n  createBooking: async bookingData => {\n    try {\n      const response = await api.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Error creating booking'\n      };\n    }\n  },\n  /**\n   * Get a specific booking by ID\n   * @param {string} bookingId - The booking ID\n   * @returns {Promise} - API response\n   */\n  getBookingById: async bookingId => {\n    try {\n      const response = await api.get(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Error fetching booking'\n      };\n    }\n  },\n  /**\n   * Get all bookings (admin only)\n   * @param {Object} params - Query parameters (pagination, filters)\n   * @returns {Promise} - API response\n   */\n  getAllBookings: async (params = {}) => {\n    try {\n      const response = await api.get('/bookings', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Error fetching bookings'\n      };\n    }\n  },\n  /**\n   * Update booking status\n   * @param {string} bookingId - The booking ID\n   * @param {string} status - New status ('pending', 'confirmed', 'cancelled', 'completed')\n   * @returns {Promise} - API response\n   */\n  updateBookingStatus: async (bookingId, status) => {\n    try {\n      const response = await api.put(`/bookings/${bookingId}`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Error updating booking status'\n      };\n    }\n  },\n  /**\n   * Delete a booking\n   * @param {string} bookingId - The booking ID\n   * @returns {Promise} - API response\n   */\n  deleteBooking: async bookingId => {\n    try {\n      const response = await api.delete(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Error deleting booking'\n      };\n    }\n  },\n  /**\n   * Calculate booking price\n   * @param {Object} params - Price calculation parameters\n   * @param {string} params.service - Service type\n   * @param {string} params.duration - Duration of service per day\n   * @param {number} params.days - Number of days\n   * @returns {Promise} - API response with calculated price\n   */\n  calculatePrice: async params => {\n    try {\n      const response = await api.post('/bookings/calculate-price', params);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: 'Error calculating price'\n      };\n    }\n  }\n};\nexport default bookingService;","map":{"version":3,"names":["api","bookingService","createBooking","bookingData","response","post","data","error","_error$response","message","getBookingById","bookingId","get","_error$response2","getAllBookings","params","_error$response3","updateBookingStatus","status","put","_error$response4","deleteBooking","delete","_error$response5","calculatePrice","_error$response6"],"sources":["/home/mrunal/Documents/life_care_nursing_services/lifecare-website/client/src/api/bookingService.js"],"sourcesContent":["// client/src/api/bookingService.js\nimport api from './index';\n\n/**\n * Booking service for handling booking-related API requests\n */\nconst bookingService = {\n  /**\n   * Create a new booking\n   * @param {Object} bookingData - Booking information\n   * @returns {Promise} - API response\n   */\n  createBooking: async (bookingData) => {\n    try {\n      const response = await api.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error creating booking' };\n    }\n  },\n\n  /**\n   * Get a specific booking by ID\n   * @param {string} bookingId - The booking ID\n   * @returns {Promise} - API response\n   */\n  getBookingById: async (bookingId) => {\n    try {\n      const response = await api.get(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error fetching booking' };\n    }\n  },\n\n  /**\n   * Get all bookings (admin only)\n   * @param {Object} params - Query parameters (pagination, filters)\n   * @returns {Promise} - API response\n   */\n  getAllBookings: async (params = {}) => {\n    try {\n      const response = await api.get('/bookings', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error fetching bookings' };\n    }\n  },\n\n  /**\n   * Update booking status\n   * @param {string} bookingId - The booking ID\n   * @param {string} status - New status ('pending', 'confirmed', 'cancelled', 'completed')\n   * @returns {Promise} - API response\n   */\n  updateBookingStatus: async (bookingId, status) => {\n    try {\n      const response = await api.put(`/bookings/${bookingId}`, { status });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error updating booking status' };\n    }\n  },\n\n  /**\n   * Delete a booking\n   * @param {string} bookingId - The booking ID\n   * @returns {Promise} - API response\n   */\n  deleteBooking: async (bookingId) => {\n    try {\n      const response = await api.delete(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error deleting booking' };\n    }\n  },\n\n  /**\n   * Calculate booking price\n   * @param {Object} params - Price calculation parameters\n   * @param {string} params.service - Service type\n   * @param {string} params.duration - Duration of service per day\n   * @param {number} params.days - Number of days\n   * @returns {Promise} - API response with calculated price\n   */\n  calculatePrice: async (params) => {\n    try {\n      const response = await api.post('/bookings/calculate-price', params);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error calculating price' };\n    }\n  }\n};\n\nexport default bookingService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}