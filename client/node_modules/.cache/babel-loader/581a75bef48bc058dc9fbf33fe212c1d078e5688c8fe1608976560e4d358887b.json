{"ast":null,"code":"// client/src/api/contactService.js\nimport api from './index';\n\n/**\n * Contact service for handling contact-related API requests\n */\nconst contactService = {\n  /**\n   * Send a contact message\n   * @param {Object} contactData - Contact form data\n   * @param {string} contactData.name - Sender's name\n   * @param {string} contactData.email - Sender's email\n   * @param {string} contactData.subject - Message subject\n   * @param {string} contactData.message - Message content\n   * @returns {Promise} - API response\n   */\n  sendContactMessage: async contactData => {\n    try {\n      const response = await api.post('/contact', contactData);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Error sending message'\n      };\n    }\n  },\n  /**\n   * Subscribe to newsletter\n   * @param {string} email - Subscriber's email\n   * @returns {Promise} - API response\n   */\n  subscribeNewsletter: async email => {\n    try {\n      const response = await api.post('/contact/newsletter', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Error subscribing to newsletter'\n      };\n    }\n  }\n};\nexport default contactService;","map":{"version":3,"names":["api","contactService","sendContactMessage","contactData","response","post","data","error","_error$response","message","subscribeNewsletter","email","_error$response2"],"sources":["/home/mrunal/Documents/life_care_nursing_services/lifecare-website/client/src/api/contactService.js"],"sourcesContent":["// client/src/api/contactService.js\nimport api from './index';\n\n/**\n * Contact service for handling contact-related API requests\n */\nconst contactService = {\n  /**\n   * Send a contact message\n   * @param {Object} contactData - Contact form data\n   * @param {string} contactData.name - Sender's name\n   * @param {string} contactData.email - Sender's email\n   * @param {string} contactData.subject - Message subject\n   * @param {string} contactData.message - Message content\n   * @returns {Promise} - API response\n   */\n  sendContactMessage: async (contactData) => {\n    try {\n      const response = await api.post('/contact', contactData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error sending message' };\n    }\n  },\n\n  /**\n   * Subscribe to newsletter\n   * @param {string} email - Subscriber's email\n   * @returns {Promise} - API response\n   */\n  subscribeNewsletter: async (email) => {\n    try {\n      const response = await api.post('/contact/newsletter', { email });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error subscribing to newsletter' };\n    }\n  }\n};\n\nexport default contactService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,MAAOC,WAAW,IAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,UAAU,EAAEF,WAAW,CAAC;MACxD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,MAAOC,KAAK,IAAK;IACpC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,qBAAqB,EAAE;QAAEM;MAAM,CAAC,CAAC;MACjE,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAK,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACH,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBN,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAkC,CAAC;IAC9E;EACF;AACF,CAAC;AAED,eAAeR,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}