{"ast":null,"code":"// client/src/api/reviewService.js\nimport api from './index';\n\n/**\n * Review service for handling review-related API requests\n */\nconst reviewService = {\n  /**\n   * Get all reviews\n   * @param {Object} params - Query parameters (pagination, filters)\n   * @returns {Promise} - API response\n   */\n  getReviews: async (params = {}) => {\n    try {\n      const response = await api.get('/reviews', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Error fetching reviews'\n      };\n    }\n  },\n  /**\n   * Get a specific review by ID\n   * @param {string} reviewId - The review ID\n   * @returns {Promise} - API response\n   */\n  getReviewById: async reviewId => {\n    try {\n      const response = await api.get(`/reviews/${reviewId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Error fetching review'\n      };\n    }\n  },\n  /**\n   * Create a new review\n   * @param {Object} reviewData - Review data\n   * @returns {Promise} - API response\n   */\n  createReview: async reviewData => {\n    try {\n      const response = await api.post('/reviews', reviewData);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Error creating review'\n      };\n    }\n  },\n  /**\n   * Update an existing review\n   * @param {string} reviewId - The review ID\n   * @param {Object} reviewData - Updated review data\n   * @returns {Promise} - API response\n   */\n  updateReview: async (reviewId, reviewData) => {\n    try {\n      const response = await api.put(`/reviews/${reviewId}`, reviewData);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Error updating review'\n      };\n    }\n  },\n  /**\n   * Delete a review\n   * @param {string} reviewId - The review ID\n   * @returns {Promise} - API response\n   */\n  deleteReview: async reviewId => {\n    try {\n      const response = await api.delete(`/reviews/${reviewId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Error deleting review'\n      };\n    }\n  }\n};\nexport default reviewService;","map":{"version":3,"names":["api","reviewService","getReviews","params","response","get","data","error","_error$response","message","getReviewById","reviewId","_error$response2","createReview","reviewData","post","_error$response3","updateReview","put","_error$response4","deleteReview","delete","_error$response5"],"sources":["/home/mrunal/Documents/life_care_nursing_services/lifecare-website/client/src/api/reviewService.js"],"sourcesContent":["// client/src/api/reviewService.js\nimport api from './index';\n\n/**\n * Review service for handling review-related API requests\n */\nconst reviewService = {\n  /**\n   * Get all reviews\n   * @param {Object} params - Query parameters (pagination, filters)\n   * @returns {Promise} - API response\n   */\n  getReviews: async (params = {}) => {\n    try {\n      const response = await api.get('/reviews', { params });\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error fetching reviews' };\n    }\n  },\n\n  /**\n   * Get a specific review by ID\n   * @param {string} reviewId - The review ID\n   * @returns {Promise} - API response\n   */\n  getReviewById: async (reviewId) => {\n    try {\n      const response = await api.get(`/reviews/${reviewId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error fetching review' };\n    }\n  },\n\n  /**\n   * Create a new review\n   * @param {Object} reviewData - Review data\n   * @returns {Promise} - API response\n   */\n  createReview: async (reviewData) => {\n    try {\n      const response = await api.post('/reviews', reviewData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error creating review' };\n    }\n  },\n\n  /**\n   * Update an existing review\n   * @param {string} reviewId - The review ID\n   * @param {Object} reviewData - Updated review data\n   * @returns {Promise} - API response\n   */\n  updateReview: async (reviewId, reviewData) => {\n    try {\n      const response = await api.put(`/reviews/${reviewId}`, reviewData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error updating review' };\n    }\n  },\n\n  /**\n   * Delete a review\n   * @param {string} reviewId - The review ID\n   * @returns {Promise} - API response\n   */\n  deleteReview: async (reviewId) => {\n    try {\n      const response = await api.delete(`/reviews/${reviewId}`);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { message: 'Error deleting review' };\n    }\n  }\n};\n\nexport default reviewService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,SAAS;;AAEzB;AACA;AACA;AACA,MAAMC,aAAa,GAAG;EACpB;AACF;AACA;AACA;AACA;EACEC,UAAU,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,UAAU,EAAE;QAAEF;MAAO,CAAC,CAAC;MACtD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAyB,CAAC;IACrE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,aAAa,EAAE,MAAOC,QAAQ,IAAK;IACjC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,YAAYM,QAAQ,EAAE,CAAC;MACtD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAK,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACH,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgBN,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEI,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAC,UAAU,EAAED,UAAU,CAAC;MACvD,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAS,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEQ,YAAY,EAAE,MAAAA,CAAON,QAAQ,EAAEG,UAAU,KAAK;IAC5C,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAC,YAAYP,QAAQ,EAAE,EAAEG,UAAU,CAAC;MAClE,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAY,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEW,YAAY,EAAE,MAAOT,QAAQ,IAAK;IAChC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,MAAM,CAAC,YAAYV,QAAQ,EAAE,CAAC;MACzD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAe,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAf,KAAK,CAACH,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBhB,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF;AACF,CAAC;AAED,eAAeR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}